export const DirectoriesTreeMock: Directories.Entity[] = [
  {
    type: 'folder',
    isOpened: false,
    id: 0,
    parentId: null,
    title: '',
    children: [1, 10, 11],
  },
  {
    type: 'file',
    isOpened: false,
    id: 10,
    parentId: 0,
    title: 'example.png',
  },
  {
    type: 'file',
    isOpened: false,
    id: 11,
    parentId: 0,
    title: 'user.png',
  },
  {
    type: 'folder',
    isOpened: false,
    id: 1,
    parentId: 0,
    title: 'folder1',
    children: [12, 2, 3, 4],
  },
  {
    type: 'file',
    isOpened: false,
    id: 12,
    parentId: 1,
    title: 'mobx.jpg',
  },
  {
    type: 'folder',
    isOpened: false,
    id: 2,
    parentId: 1,
    title: 'folder2',
    children: [5, 13],
  },
  {
    type: 'file',
    isOpened: false,
    id: 13,
    parentId: 2,
    title: 'mobx2.jpg',
  },
  {
    type: 'folder',
    isOpened: false,
    id: 3,
    parentId: 1,
    title: 'folder4',
    children: [],
  },
  {
    type: 'folder',
    isOpened: false,
    id: 4,
    parentId: 1,
    title: 'folder5',
    children: [],
  },
  {
    type: 'folder',
    isOpened: false,
    id: 5,
    parentId: 2,
    title: 'mobx',
    children: [],
  },
];

export const DirectoriesTreeMock_asMap = new Map<
  number,
  Directories.ExtendedEntity
>([
  [
    0,
    {
      type: 'folder',
      isOpened: false,
      id: 0,
      parentId: null,
      title: '',
      children: [1, 10, 11],
    },
  ],
  [
    10,
    {
      type: 'file',
      isOpened: false,
      id: 10,
      parentId: 0,
      title: 'example.png',
    },
  ],
  [
    11,
    {
      type: 'file',
      isOpened: false,
      id: 11,
      parentId: 0,
      title: 'user.png',
    },
  ],
  [
    1,
    {
      type: 'folder',
      isOpened: false,
      id: 1,
      parentId: 0,
      title: 'folder1',
      children: [12, 2, 3, 4],
    },
  ],
  [
    12,
    {
      type: 'file',
      isOpened: false,
      id: 12,
      parentId: 1,
      title: 'mobx.jpg',
    },
  ],
  [
    2,
    {
      type: 'folder',
      isOpened: false,
      id: 2,
      parentId: 1,
      title: 'folder2',
      children: [5, 13],
    },
  ],
  [
    13,
    {
      type: 'file',
      isOpened: false,
      id: 13,
      parentId: 2,
      title: 'mobx2.jpg',
    },
  ],
  [
    3,
    {
      type: 'folder',
      isOpened: false,
      id: 3,
      parentId: 1,
      title: 'folder4',
      children: [],
    },
  ],
  [
    4,
    {
      type: 'folder',
      isOpened: false,
      id: 4,
      parentId: 1,
      title: 'folder5',
      children: [],
    },
  ],
  [
    5,
    {
      type: 'folder',
      isOpened: false,
      id: 5,
      parentId: 2,
      title: 'mobx',
      children: [],
    },
  ],
]);

export const expectedMatchedMobxEntities: Directories.Entity[] =
  DirectoriesTreeMock.filter((entity) => entity.title.includes('mobx'));

export const expectedParentDirectories: Directories.Entity[] = [
  {
    type: 'folder',
    isOpened: false,
    id: 0,
    parentId: null,
    title: '',
    children: [1, 10, 11],
  },
  {
    type: 'folder',
    isOpened: false,
    id: 1,
    parentId: 0,
    title: 'folder1',
    children: [12, 2, 3, 4],
  },
  {
    type: 'folder',
    isOpened: false,
    id: 2,
    parentId: 1,
    title: 'folder2',
    children: [5, 13],
  },
];

export const expectedTreeWithMobxEntities: Directories.Entity[] = [
  {
    type: 'folder',
    isOpened: true,
    id: 0,
    parentId: null,
    title: '',
    children: [1, 10, 11],
  },
  {
    type: 'folder',
    isOpened: true,
    id: 1,
    parentId: 0,
    title: 'folder1',
    children: [12, 2, 3, 4],
  },
  {
    type: 'file',
    isOpened: false,
    id: 12,
    parentId: 1,
    title: 'mobx.jpg',
  },
  {
    type: 'folder',
    isOpened: true,
    id: 2,
    parentId: 1,
    title: 'folder2',
    children: [5, 13],
  },
  {
    type: 'file',
    isOpened: false,
    id: 13,
    parentId: 2,
    title: 'mobx2.jpg',
  },
  {
    type: 'folder',
    isOpened: false,
    id: 5,
    parentId: 2,
    title: 'mobx',
    children: [],
  },
];

export const expectedTreeWithMobxJpgEntities: Directories.Entity[] = [
  {
    type: 'folder',
    isOpened: true,
    id: 0,
    parentId: null,
    title: '',
    children: [1, 10, 11],
  },
  {
    type: 'folder',
    isOpened: true,
    id: 1,
    parentId: 0,
    title: 'folder1',
    children: [12, 2, 3, 4],
  },
  {
    type: 'file',
    isOpened: false,
    id: 12,
    parentId: 1,
    title: 'mobx.jpg',
  },
];

export const expectedTreeWithFolderEntities: Directories.Entity[] = [
  {
    type: 'folder',
    isOpened: true,
    id: 0,
    parentId: null,
    title: '',
    children: [1, 10, 11],
  },
  {
    type: 'folder',
    isOpened: true,
    id: 1,
    parentId: 0,
    title: 'folder1',
    children: [12, 2, 3, 4],
  },
  {
    type: 'folder',
    isOpened: false,
    id: 2,
    parentId: 1,
    title: 'folder2',
    children: [5, 13],
  },
  {
    type: 'folder',
    isOpened: false,
    id: 3,
    parentId: 1,
    title: 'folder4',
    children: [],
  },
  {
    type: 'folder',
    isOpened: false,
    id: 4,
    parentId: 1,
    title: 'folder5',
    children: [],
  },
];

export const resultAfterDirectoryDeletion: Directories.Entity[] = [
  {
    type: 'folder',
    isOpened: false,
    id: 0,
    parentId: null,
    title: '',
    children: [1, 10, 11],
  },
  {
    type: 'file',
    isOpened: false,
    id: 10,
    parentId: 0,
    title: 'example.png',
  },
  {
    type: 'file',
    isOpened: false,
    id: 11,
    parentId: 0,
    title: 'user.png',
  },
];

export const resultAfterFileDeletion: Directories.Entity[] = [
  {
    type: 'folder',
    isOpened: false,
    id: 0,
    parentId: null,
    title: '',
    children: [1, 10, 11],
  },
  {
    type: 'file',
    isOpened: false,
    id: 10,
    parentId: 0,
    title: 'example.png',
  },
  {
    type: 'file',
    isOpened: false,
    id: 11,
    parentId: 0,
    title: 'user.png',
  },
  {
    type: 'folder',
    isOpened: false,
    id: 1,
    parentId: 0,
    title: 'folder1',
    children: [12, 2, 3, 4],
  },
  {
    type: 'file',
    isOpened: false,
    id: 12,
    parentId: 1,
    title: 'mobx.jpg',
  },
  {
    type: 'folder',
    isOpened: false,
    id: 2,
    parentId: 1,
    title: 'folder2',
    children: [5, 13],
  },
  {
    type: 'folder',
    isOpened: false,
    id: 3,
    parentId: 1,
    title: 'folder4',
    children: [],
  },
  {
    type: 'folder',
    isOpened: false,
    id: 4,
    parentId: 1,
    title: 'folder5',
    children: [],
  },
  {
    type: 'folder',
    isOpened: false,
    id: 5,
    parentId: 2,
    title: 'mobx',
    children: [],
  },
];

export const resultAfterMovingAFile: Directories.Entity[] = [
  {
    type: 'folder',
    isOpened: false,
    id: 0,
    parentId: null,
    title: '',
    children: [1, 10, 11],
  },
  {
    type: 'file',
    isOpened: false,
    id: 10,
    parentId: 0,
    title: 'example.png',
  },
  {
    type: 'file',
    isOpened: false,
    id: 11,
    parentId: 0,
    title: 'user.png',
  },
  {
    type: 'folder',
    isOpened: false,
    id: 1,
    parentId: 0,
    title: 'folder1',
    children: [12, 2, 3, 4],
  },
  {
    type: 'file',
    isOpened: false,
    id: 12,
    parentId: 1,
    title: 'mobx.jpg',
  },
  {
    type: 'folder',
    isOpened: false,
    id: 2,
    parentId: 1,
    title: 'folder2',
    children: [5, 13],
  },
  {
    type: 'file',
    isOpened: false,
    id: 13,
    parentId: 0,
    title: 'mobx2.jpg',
  },
  {
    type: 'folder',
    isOpened: false,
    id: 3,
    parentId: 1,
    title: 'folder4',
    children: [],
  },
  {
    type: 'folder',
    isOpened: false,
    id: 4,
    parentId: 1,
    title: 'folder5',
    children: [],
  },
  {
    type: 'folder',
    isOpened: false,
    id: 5,
    parentId: 2,
    title: 'mobx',
    children: [],
  },
];

export const expectedChildrenOfDirectory: Directories.Entity[] = [
  {
    type: 'folder',
    isOpened: false,
    id: 2,
    parentId: 1,
    title: 'folder2',
    children: [5, 13],
  },
  {
    type: 'folder',
    isOpened: false,
    id: 3,
    parentId: 1,
    title: 'folder4',
    children: [],
  },
  {
    type: 'folder',
    isOpened: false,
    id: 4,
    parentId: 1,
    title: 'folder5',
    children: [],
  },
  {
    type: 'file',
    isOpened: false,
    id: 12,
    parentId: 1,
    title: 'mobx.jpg',
  },
];
